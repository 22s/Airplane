From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Sat, 31 Oct 2020 19:41:11 -0500
Subject: [PATCH] Concurrent loadedChunkMap

This patch allows multithreaded code to take advantage of the
loadedChunkMap, instead of having to wait on the main thread
to retrieve the chunk or wait on a lock.

Airplane Lite
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index fc9919dd01cad02486af293f9b0c692046c7eea1..83e3dcbbe36ce1f947f387ec55067e51a1b7384a 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -49,7 +49,7 @@ public class ChunkProviderServer extends IChunkProvider {
     private SpawnerCreature.d p;
     // Paper start
     final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
-    final Long2ObjectOpenHashMap<Chunk> loadedChunkMap = new Long2ObjectOpenHashMap<>(8192, 0.5f);
+    final Long2ObjectOpenHashMap<Chunk> loadedChunkMap = new gg.airplane.structs.ConcLong2ObjectOpenHashMap<>(8192, 0.5f); // AirplaneL
 
     private final Chunk[] lastLoadedChunks = new Chunk[4 * 4];
     private final long[] lastLoadedChunkKeys = new long[4 * 4];
@@ -63,13 +63,15 @@ public class ChunkProviderServer extends IChunkProvider {
     }
 
     void addLoadedChunk(Chunk chunk) {
-        this.loadedChunkMapSeqLock.acquireWrite();
+        //this.loadedChunkMapSeqLock.acquireWrite(); // AirplaneL - unneeded
         try {
             this.loadedChunkMap.put(chunk.coordinateKey, chunk);
         } finally {
-            this.loadedChunkMapSeqLock.releaseWrite();
+            //this.loadedChunkMapSeqLock.releaseWrite(); // AirplaneL
         }
 
+        // AirplaneL start - this isn't very useful
+        /*
         // rewrite cache if we have to
         // we do this since we also cache null chunks
         int cacheKey = getCacheKey(chunk.getPos().x, chunk.getPos().z);
@@ -78,16 +80,20 @@ public class ChunkProviderServer extends IChunkProvider {
         if (cachedKey == chunk.coordinateKey) {
             this.lastLoadedChunks[cacheKey] = chunk;
         }
+         */
+        // AirplaneL end
     }
 
     void removeLoadedChunk(Chunk chunk) {
-        this.loadedChunkMapSeqLock.acquireWrite();
+        //this.loadedChunkMapSeqLock.acquireWrite(); // AirplaneL - unneeded
         try {
             this.loadedChunkMap.remove(chunk.coordinateKey);
         } finally {
-            this.loadedChunkMapSeqLock.releaseWrite();
+            //this.loadedChunkMapSeqLock.releaseWrite(); // AirplaneL
         }
 
+        // AirplaneL start - this isn't very useful
+        /*
         // rewrite cache if we have to
         // we do this since we also cache null chunks
         int cacheKey = getCacheKey(chunk.getPos().x, chunk.getPos().z);
@@ -96,9 +102,13 @@ public class ChunkProviderServer extends IChunkProvider {
         if (cachedKey == chunk.coordinateKey) {
             this.lastLoadedChunks[cacheKey] = null;
         }
+         */
+        // AirplaneL end
     }
 
     public Chunk getChunkAtIfLoadedMainThread(int x, int z) {
+        // AirplaneL start
+        /*
         int cacheKey = getCacheKey(x, z);
         long chunkKey = MCUtil.getCoordinateKey(x, z);
 
@@ -113,10 +123,13 @@ public class ChunkProviderServer extends IChunkProvider {
         this.lastLoadedChunks[cacheKey] = ret;
 
         return ret;
+         */
+        return this.loadedChunkMap.get(((long)z << 32) | (x & 0xFFFFFFFFL));
+        // AirplaneL end
     }
 
     public Chunk getChunkAtIfLoadedMainThreadNoCache(int x, int z) {
-        return this.loadedChunkMap.get(MCUtil.getCoordinateKey(x, z));
+        return this.loadedChunkMap.get(((long)z << 32) | (x & 0xFFFFFFFFL)); // AirplaneL - inline MCUtil.getCoordinateKey
     }
 
     public Chunk getChunkAtMainThread(int x, int z) {
@@ -416,6 +429,8 @@ public class ChunkProviderServer extends IChunkProvider {
     }
 
     private void a(long i, IChunkAccess ichunkaccess, ChunkStatus chunkstatus) {
+        // AirplaneL start
+        /*
         for (int j = 3; j > 0; --j) {
             this.cachePos[j] = this.cachePos[j - 1];
             this.cacheStatus[j] = this.cacheStatus[j - 1];
@@ -425,6 +440,8 @@ public class ChunkProviderServer extends IChunkProvider {
         this.cachePos[0] = i;
         this.cacheStatus[0] = chunkstatus;
         this.cacheChunk[0] = ichunkaccess;
+         */
+        // AirplaneL end
     }
 
     // Paper start - "real" get chunk if loaded
@@ -445,6 +462,8 @@ public class ChunkProviderServer extends IChunkProvider {
 
     @Nullable
     public Chunk getChunkAtIfLoadedImmediately(int x, int z) {
+        // AirplaneL start
+        /*
         long k = ChunkCoordIntPair.pair(x, z);
 
         if (Thread.currentThread() == this.serverThread) {
@@ -467,6 +486,9 @@ public class ChunkProviderServer extends IChunkProvider {
         } while (!this.loadedChunkMapSeqLock.tryReleaseRead(readlock));
 
         return ret;
+         */
+        return this.loadedChunkMap.get(((long)z << 32) | (x & 0xFFFFFFFFL));
+        // AirplaneL end
     }
 
     @Nullable
@@ -512,6 +534,8 @@ public class ChunkProviderServer extends IChunkProvider {
 
         IChunkAccess ichunkaccess;
 
+        // AirplaneL start
+        /*
         // try cache
         for (int l = 0; l < 4; ++l) {
             if (k == this.cachePos[l] && ChunkStatus.FULL == this.cacheStatus[l]) {
@@ -534,6 +558,8 @@ public class ChunkProviderServer extends IChunkProvider {
                 }
             }
         }
+         */
+        // AirplaneL end
 
         if (gen) {
             return this.bringToFullStatusAsync(x, z, chunkPos, isUrgent);
@@ -635,17 +661,27 @@ public class ChunkProviderServer extends IChunkProvider {
     @Override
     public IChunkAccess getChunkAt(int i, int j, ChunkStatus chunkstatus, boolean flag) {
         final int x = i; final int z = j; // Paper - conflict on variable change
+        // AirplaneL start - this is now concurrent, so give fast returns for other threads if it's loaded
+        Chunk ifLoaded = this.getChunkAtIfLoadedMainThread(i, j);
+        if (ifLoaded != null) {
+            return ifLoaded;
+        }
+        // AirplaneL end
         if (Thread.currentThread() != this.serverThread) {
             return (IChunkAccess) CompletableFuture.supplyAsync(() -> {
                 return this.getChunkAt(i, j, chunkstatus, flag);
             }, this.serverThreadQueue).join();
         } else {
+            // AirplaneL start - moved up
+            /*
             // Paper start - optimise for loaded chunks
             Chunk ifLoaded = this.getChunkAtIfLoadedMainThread(i, j);
             if (ifLoaded != null) {
                 return ifLoaded;
             }
             // Paper end
+             */
+            // AirplaneL end
             GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
             gameprofilerfiller.c("getChunk");
@@ -653,6 +689,8 @@ public class ChunkProviderServer extends IChunkProvider {
 
             IChunkAccess ichunkaccess;
 
+            // AirplaneL start
+            /*
             for (int l = 0; l < 4; ++l) {
                 if (k == this.cachePos[l] && chunkstatus == this.cacheStatus[l]) {
                     ichunkaccess = this.cacheChunk[l];
@@ -661,6 +699,8 @@ public class ChunkProviderServer extends IChunkProvider {
                     }
                 }
             }
+             */
+            // AirplaneL end
 
             gameprofilerfiller.c("getChunkCacheMiss");
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = this.getChunkFutureMainThread(i, j, chunkstatus, flag, true); // Paper
@@ -697,17 +737,23 @@ public class ChunkProviderServer extends IChunkProvider {
     @Nullable
     @Override
     public Chunk a(int i, int j) {
-        if (Thread.currentThread() != this.serverThread) {
-            return null;
-        } else {
+        // AirplaneL start
+//        if (Thread.currentThread() != this.serverThread) {
+//            return null;
+//        } else {
             return this.getChunkAtIfLoadedMainThread(i, j); // Paper - optimise for loaded chunks
-        }
+//        }
+        // AirplaneL end
     }
 
     private void clearCache() {
+        // AirplaneL start
+        /*
         Arrays.fill(this.cachePos, ChunkCoordIntPair.a);
         Arrays.fill(this.cacheStatus, (Object) null);
         Arrays.fill(this.cacheChunk, (Object) null);
+         */
+        // AirplaneL end
     }
 
     private long syncLoadCounter; // Tuinity - prevent plugin unloads from removing our ticket
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 004c50026b9b2033411f1890061e63533341ea2f..5a836ce3a45711c068a880943a7b564029d4da35 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -404,12 +404,12 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final Chunk getChunkAt(int i, int j) { // Paper - final to help inline
         // Tuinity start - make sure loaded chunks get the inlined variant of this function
         ChunkProviderServer cps = ((WorldServer)this).chunkProvider;
-        if (cps.serverThread == Thread.currentThread()) {
+        //if (cps.serverThread == Thread.currentThread()) { // AirplaneL
             Chunk ifLoaded = cps.getChunkAtIfLoadedMainThread(i, j);
             if (ifLoaded != null) {
                 return ifLoaded;
             }
-        }
+        //} // AirplaneL
         // Tuinity end - make sure loaded chunks get the inlined variant of this function
         return (Chunk) this.getChunkAt(i, j, ChunkStatus.FULL, true); // Paper - avoid a method jump
     }
