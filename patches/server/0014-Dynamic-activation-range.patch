From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Fri, 15 Jan 2021 19:05:01 -0600
Subject: [PATCH] Dynamic activation range

This replaces the current method of ticking an inactive entity's
pathfinder 1/4 times with a new method that's dynamic based off how far
away it is from a player. If an entity is within 32 blocks, it gets
ticked every tick. If it's within 45 blocks, it gets ticked every other
tick. If it's within 55 blocks, it gets ticked once every three ticks.

todo use with actual entity ticking, not just inactive.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 013c44f80f74376e8bbb37afb5de07aa5d8fb1bc..7b121b0b8a7da5e028ef8748c47b9c8522dde8f9 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -197,6 +197,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public void inactiveTick() { }
     // Spigot end
     public boolean shouldBeRemoved; // Paper
+    // AirplaneL start
+    public int activatedPriority = 20; // golf score
+    // AirplaneL end
 
     public float getBukkitYaw() {
         return this.yaw;
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 7582a3a0955db2bc79daeced8e9c869f4276815a..986b5725421cca763250b45d92440316b937a639 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -132,10 +132,10 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     public void inactiveTick() {
         super.inactiveTick();
-        if (this.goalSelector.inactiveTick()) {
+        if (this.goalSelector.inactiveTick(this.activatedPriority)) { // AirplaneL - pass activated priroity
             this.goalSelector.doTick();
         }
-        if (this.targetSelector.inactiveTick()) {
+        if (this.targetSelector.inactiveTick(this.activatedPriority)) { // AirplaneL - pass activated priority
             this.targetSelector.doTick();
         }
     }
@@ -760,9 +760,11 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bo.a();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("targetSelector");
+        if (this.targetSelector.inactiveTick(this.activatedPriority)) // AirplaneL - use this to alternate ticking
         this.targetSelector.doTick();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("goalSelector");
+        if (this.goalSelector.inactiveTick(this.activatedPriority)) // AirplaneL - use this to alternate ticking
         this.goalSelector.doTick();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("navigation");
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index d3f0327a2a7cdedf3fe8d10df981a9f1cb378d26..684e90b8ae0543fbcf4c2536c90a144229f3ee48 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -43,9 +43,10 @@ public class PathfinderGoalSelector {
     }
 
     // Paper start
-    public boolean inactiveTick() {
-        if (getCurRate() % getTickRate() != 0) {
-            incRate();
+    public boolean inactiveTick(int tickRate) { // AirplaneL - take tick rate
+        tickRate = Math.max(tickRate, getTickRate()); // AirplaneL
+        if (this.curRate++ % tickRate != 0) { // AirplaneL - use tick rate / increment curRate every tick
+            //incRate();
             return false;
         } else {
             return true;
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 0b93635ba59df4eb4456a97c5e9b51ab5aeda53f..66ba0e146d043b83ed1b84be417369de7364e11f 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -50,6 +50,9 @@ import net.minecraft.server.EntityInsentient;
 import net.minecraft.server.EntityLlama;
 import net.minecraft.server.EntityWaterAnimal;
 // Paper end
+// AirplaneL start
+import net.minecraft.server.Vec3D;
+// AirplaneL end
 
 public class ActivationRange
 {
@@ -230,7 +233,7 @@ public class ActivationRange
                     Chunk chunk = chunkProvider.getChunkAtIfLoadedMainThreadNoCache( i1, j1 ); // Paper
                     if ( chunk != null )
                     {
-                        activateChunkEntities( chunk );
+                        activateChunkEntities( chunk, player.getPositionVector() ); // AirplaneL
                     }
                 }
             }
@@ -243,7 +246,7 @@ public class ActivationRange
      *
      * @param chunk
      */
-    private static void activateChunkEntities(Chunk chunk)
+    private static void activateChunkEntities(Chunk chunk, Vec3D playerVec) // AirplaneL - add player location
     {
         // Paper start
         Entity[] rawData = chunk.entities.getRawData();
@@ -252,11 +255,19 @@ public class ActivationRange
             //for ( Entity entity : (Collection<Entity>) slice )
             // Paper end
             {
+                // AirplaneL start
+                Vec3D entityVec = entity.getPositionVector();
+                double diffX = playerVec.x - entityVec.x, diffY = playerVec.y - entityVec.y, diffZ = playerVec.z - entityVec.z;
+                int priority = (int) (diffX * diffX + diffY * diffY + diffZ * diffZ) >> 9;
                 if (MinecraftServer.currentTick > entity.activatedTick) {
                     if (entity.defaultActivationState || entity.activationType.boundingBox.c(entity.getBoundingBox())) { // Paper
                         entity.activatedTick = MinecraftServer.currentTick;
                     }
+                    entity.activatedPriority = Math.min(20, priority);
+                } else {
+                    entity.activatedPriority = Math.min(20, Math.min(priority, entity.activatedPriority));
                 }
+                // AirplaneL end
             }
         }
     }
